---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This is a master template to create a Web Application Architecture.
    The following task will be built in this template.
    - Custom VPC with Private(AZ1 & AZ2) and Public(AZ1 & AZ2)  Subnet spread across 2 Availability Zones. Spanning an AWS region
    - Internet Gateway, with a default route on the public subnets.
    - NAT Gateways (In one Public AZ) and route to private subnets.
    - AutoScalingGroup (WebServer & AppServer)
    - Elastic Load Balancer (WebELB & AppELB)
    - CloudWatch for resource and log monitoring
    - S3 for log storage
    - 
    - 
 
###############################################################################################################

Parameters:

  PMOWNIP:
    Default: "0.0.0.0/0"
    Description: "Update this with your own office/home public ip address"
    Type: "String"

  PMKeyName:
    Default: "AdvancedCFN"
    Description: "Enter an existing EC2 KeyPair. Default is MyEC2Key."
    Type: "String"

  PMTemplateURL:
    Default: "https://s3.amazonaws.com/webapp-deployment-jobs"
    Description: "Enter an existing S3 Cloudformation Bucket."
    Type: "String"

  # PMHostedZone:
  #   Default: "example.com"
  #   Description: "Enter an existing Hosted Zone."
  #   Type: "String"

  PMInstanceType:
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "m1.small"


###############################################################################################################
#
# For any additional region & Env, you can add by yourself below.
Mappings:
  EnvMap:
    dev:
      ASMIN: '2'
      ASMAX: '2'
      ASDES: '2'
      #WEBDOMAIN: "dev.example.com"
      #CDNDOMAIN: "devel.example.com"
    staging:
      ASMIN: '2'
      ASMAX: '2'
      ASDES: '2'
      #WEBDOMAIN: "staging.example.com"
      #CDNDOMAIN: "static.example.com"

    prod:
      ASMIN: '2'
      ASMAX: '5'
      ASDES: '2'
      #WEBDOMAIN: "www.example.com"
      #CDNDOMAIN: "cdn.example.com"

  RegionMap:
    us-east-1:
      # AMI Instance - Amazon Linux AMI 2016.09.1 (HVM), SSD Volume Type - ami-dc9339bf (Free tier eligible)
      AMI: "ami-0b33d91d"
      # AStorage - The storage class to which you want the object to transition.
      AStorage: "GLACIER"
      # Update with your own cert ARN HERE!
      # Assuming you have already upload to AWS Certificate Manager
      #CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/eec1f4f2-2632-4d20-bd8a-fbfbcdb15920"

    us-east-2:
      AMI: "ami-c55673a0"
      AStorage: "GLACIER"
      #CertARN: "arn:aws:acm:us-east-2:370888776060:certificate/893d447c-4f33-4585-9a48-78cade65e46d"

    us-west-1:
      AMI: "ami-165a0876"
      #AStorage: "GLACIER"
      #CertARN: "arn:aws:acm:us-west-1:370888776060:certificate/d05918e0-7646-4fc5-8405-025732b31d57"

    us-west-2:
      AMI: "ami-f173cc91"
      #AStorage: "GLACIER"
      #CertARN: "arn:aws:acm:us-west-2:370888776060:certificate/97648617-e7ab-4628-ba08-1d2f0ffce058"

    ap-northeast-1:
      AMI: "ami-56d4ad31"
      #AStorage: "GLACIER"
      #CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"

    ap-southeast-1:
      AMI: "ami-dc9339bf"
      #AStorage: "STANDARD_IA"
      #CertARN: "arn:aws:acm:ap-southeast-1:370888776060:certificate/b06aa290-bb09-4fee-9e09-864c4cc8cc98"

    ap-southeast-2:
      AMI: "ami-1c47407f"
      #AStorage: "GLACIER"
      #CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/4696461e-df6b-4000-963b-68c1628f0bac"

###############################################################################################################

Resources:

  MyIAMRole:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-iam.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"

  MyS3Bucket:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-s3bucket.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMRegionAStorage: !FindInMap ["RegionMap", !Ref "AWS::Region", "AStorage"]

  MyVPC:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-vpc.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMVpcCIDR: "10.0.0.0/16"
        PMPublicSubnet1CIDR: "10.0.1.0/24"
        PMPublicSubnet2CIDR: "10.0.2.0/24"
        PMPrivateSubnet1CIDR: "10.0.3.0/24"
        PMPrivateSubnet2CIDR: "10.0.4.0/24"
        PMFlowLogRole: !GetAtt "MyIAMRole.Outputs.VPCFlowLogRoleArn"

  MySecurityGroup:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-securitygroup.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMOWNIP: !Ref "PMOWNIP"
        PMVPC: !GetAtt "MyVPC.Outputs.VPC"
        PMNACL: !GetAtt "MyVPC.Outputs.MyNetworkACL"

  MyRDS:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
    - "MySecurityGroup"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-rds.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        DatabaseUser: "root1234"
        DatabasePassword: "root1234"
        #DatabaseName: !Sub "${AWS::StackName}db"
        DatabaseName: "test"
        DatabaseSize: '5'
        DatabaseEngine: "mysql"
        DatabaseInstanceClass: "db.t2.micro"
        PMRDSSG: !GetAtt "MySecurityGroup.Outputs.RDSSG"
        PMPrivateSubnets: !GetAtt "MyVPC.Outputs.PrivateSubnets"

  MyAPPELB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-elb-appserver.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMAPPELBSG: !GetAtt "MySecurityGroup.Outputs.APPELBSG"
        PMS3Logging: !GetAtt "MyS3Bucket.Outputs.S3Logging"
        PMPrivateSubnets: !GetAtt "MyVPC.Outputs.PrivateSubnets"

  MyAPPAutoScaling:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-autoscaling-appserver.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMKeyName: !Ref "PMKeyName"
        PMInstanceType: !Ref "PMInstanceType"
        PMRegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
        PMAPPHostSG : !GetAtt "MySecurityGroup.Outputs.APPHostSG"
        PMAPPLoadBalancer: !GetAtt "MyAPPELB.Outputs.APPLoadBalancer"
        PMIAMS3CWInstanceProfile: !GetAtt "MyIAMRole.Outputs.IAMS3CWInstanceProfile"
        PMPrivateSubnets: !GetAtt "MyVPC.Outputs.PrivateSubnets"
        PMASMIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMIN"]
        PMASMAX: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMAX"]
        PMASDES: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASDES"]
        #PMWEBDOMAIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]

  MyWEBELB:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
    - "MyAPPAutoScaling"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-elb-webserver.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        #PMDomain1CertARN: !FindInMap ["RegionMap", !Ref "AWS::Region", "CertARN"]
        PMWEBELBSG: !GetAtt "MySecurityGroup.Outputs.WEBELBSG"
        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"
        PMS3Backup: !GetAtt "MyS3Bucket.Outputs.S3Backup"
        PMS3Logging: !GetAtt "MyS3Bucket.Outputs.S3Logging"

  MyWEBAutoScaling:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
    - "MyWEBELB"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-autoscaling-webserver.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMKeyName: !Ref "PMKeyName"
        PMInstanceType: !Ref "PMInstanceType"
        PMRegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
        PMProxyHostSG: !GetAtt "MySecurityGroup.Outputs.ProxyHostSG"
        PMWEBLoadBalancer: !GetAtt "MyWEBELB.Outputs.WEBLoadBalancer"
        PMIAMS3CWInstanceProfile: !GetAtt "MyIAMRole.Outputs.IAMS3CWInstanceProfile"
        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"
        PMAPPLoadBalancerUrl: !GetAtt "MyAPPELB.Outputs.APPLoadBalancerUrl"
        PMASMIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMIN"]
        PMASMAX: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMAX"]
        PMASDES: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASDES"]
        #PMWEBDOMAIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]

  MyCloudWatch:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
    - "MyWEBAutoScaling"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/webapp-cloudwatch.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMWebScalingGroup: !GetAtt "MyWEBAutoScaling.Outputs.WebScalingGroup"
        PMWebServerScaleUpPolicy: !GetAtt "MyWEBAutoScaling.Outputs.WebServerScaleUpPolicy"
        PMWebServerScaleDownPolicy: !GetAtt "MyWEBAutoScaling.Outputs.WebServerScaleDownPolicy"
        PMAppScalingGroup: !GetAtt "MyAPPAutoScaling.Outputs.AppScalingGroup"
        PMAPPServerScaleUpPolicy: !GetAtt "MyAPPAutoScaling.Outputs.APPServerScaleUpPolicy"
        PMAPPServerScaleDownPolicy: !GetAtt "MyAPPAutoScaling.Outputs.APPServerScaleDownPolicy"

  # MyDNS:
  #   Type: "AWS::CloudFormation::Stack"
  #   DependsOn:
  #   - "MyWEBAutoScaling"
  #   Properties:
  #     TemplateURL: !Sub "${PMTemplateURL}/webapp-route53.yaml"
  #     TimeoutInMinutes: '5'
  #     Parameters:
  #       PMWEBLBDNSName: !GetAtt "MyWEBELB.Outputs.WEBLBDNSName"
  #       PMWEBLBHostedZoneId: !GetAtt "MyWEBELB.Outputs.WEBLBHostedZoneId"
  #       PMWEBDOMAIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]
  #       PMHostedZone: !Ref "PMHostedZone"


Outputs:
  Webserver:
    Description: "Web Server Site"
    Value:  !Join ["", ["http://", !GetAtt "MyWEBELB.Outputs.WEBLBDNSName", ""]]

  # Own Certs
  # https://cloudonaut.io/pitfall-acm-certificate-cloudfront-cloudformation/
  # Error : The specified SSL certificate doesn't exist, isn't valid, or doesn't include a valid certificate chain.
  # But the ACM certificate needs to be created in us-east-1 when used together with CloudFront.
  # So one possible solution was to create the CloudFormation stack in us-east-1. Lesson learned! :)


  # PMDomain1CertARN:
  #   Description: "A reference to SSL Certificate ARN of the region"
  #   Value: !FindInMap ["RegionMap", "us-east-1", "CertARN"]
  #   Export:
  #     Name: !Sub "${AWS::StackName}CDN-PMDomain1CertARN"
  #
  # PMHostedZone:
  #   Description: "A reference to SSL Certificate ARN of the region"
  #   Value: !Ref "PMHostedZone"
  #   Export:
  #     Name: !Sub "${AWS::StackName}CDN-PMHostedZone"
  #
  # PMCDNDOMAIN:
  #   Description: "A reference to SSL Certificate ARN of the region"
  #   Value: !FindInMap ["EnvMap", !Ref "AWS::StackName", "CDNDOMAIN"]
  #   Export:
  #     Name: !Sub "${AWS::StackName}CDN-PMCDNDOMAIN"
